GCC Version:
gcc (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0

Instructions for executing makefile:

make dh_assign_1 : creates dh_assign_1 executable

make rsa_assign_1 : creates rsa_assign_1 executable

make assign_1 : creates both dh_assign_1 and rsa_assign_1 executables

make dh_clean: removes dh_assign_1 executable

make rsa_clean: removes rsa_assign_1 executable

make clean: removes both executables

example: make clean = rm  dh_assign_1
		      rm  rsa_assign_1


**dh_assign_1 implements Diffie–Hellman Key Exchange**
**execute the file with the arguments listed below:**

This is an implementation of the Diffie–Hellman Key Exchange. User writes the required arguments as listed below and the program generates the proper public and private keys
for Alice and Bob. Long long int data types are used for the key generations.

# The tool will receive the required arguments from the command line upon execution as
such:
Options:
-o path Path to output file
-p number Prime number
-g number Primitive Root for previous prime number
-a number Private key A
-b number Private key B
-h This help message
The argument -p will include the will be the public prime number.
The argument -g will be the public primitive root of the previous prime number.
The argument -a will be the private key of user A.
The argument -b will be the private key of user B.


# Example:
./dh_assign_1 -o output.txt -p 23 -g 9 -a 15 -b 2

Using the -h option exits the program (no files written)
--------------------------------------------------

**rsa_assign_1 implements RSA algorithm**

Its an implementation that supports long long int numbers as p and q. P, Q, d ,e are generated by the program.

# The tool will receive the required arguments from the command line upon execution as
such:

Options:
-i path Path to the input file
-o path Path to the output file
-k path Path to the key file
-g Perform RSA key-pair generation
-d Decrypt input and store results to output
-e Encrypt input and store results to output
-h This help message
The arguments “i”, “o” and “k” are always required when using “e” or “d”
Using -i and a path the user specifies the path to the input file.
Using -o and a path the user specifies the path to the output file.
Using -k and a path the user specifies the path to the key file.
Using -g the tool generates a public and a private key and stores them to the public.key
and private.key files respectively.
Using -d the user specifies that the tool should read the ciphertext from the input file,
decrypt it and then store the plaintext in the output file.

**3 functions:**

- executing ./rsa_assign_1 -g 

  will generate public and private keys to public.key and private.key files
  based on p,q that are random generated using mpz_urandomb. E, D are selected following strictly the 
  RSA requirements.


- executing  ./rsa_assign_1 -i plaintext.txt -o ciphertext.txt -k public.key -e
  
  will encypt the message contained in plaintext.txt and write ciphertext.txt with the 
  encrypted message. Encryption is accomplished by taking the ascii values from the plaintext (char by char), encoding them using the public.key file
  and storing them as 8 byte long long ints to the ciphertext.txt file (ciphertext.txt contains binary data).
  
  Every byte of the plaintext.txt will converted to 8-bytes ciphertext (including the \n char in a text file), so expect sizeof(ciphertext)= 8 * sizeof(plaintext).

  (because mpz_powm doesnt support big numbers, this implementation encrypts message char by char instead of encrypting whole message at once)

- executing ./rsa_assign_1 -i ciphertext.txt -o dec_plaintext.txt -k private.key -d 
  
  will decrypt the message contained in ciphertext.txt into plain text and store the 
  decrypted message to dec_plaintext.txt using the private.key file. It reads the ciphertext.txt 
  8 bytes at a time, it decodes the long long int ,it reads and stores it in an array. After decoding, 
  the long long int array is converted to a char array and stored to the dec_plaintext.txt file.

  you can use whatever files you want instead of plaintext.txt or write your own message in plaintext.txt.

  Recommend executing each function as listed above and using the files provided in this folder.
  There are helpful commented prints throughout the code.
  
- executing ./rsa_assign_1 -h 

  prints help message
  
